# This workflow will build, sign, and package a WinUI 3 MSIX desktop application
# built on .NET.

name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]
        version: [Sideload, Store, WoA32]
        exclude: 
          - configuration: Debug
            version: Store

    runs-on: windows-latest

    env:
      Solution_Name: UniSky.sln
      Project_Name: UniSky
      ProjectFile_Name: UniSky/UniSky.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Cache NuGet
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Adjust the package version to include the current date and time, except on Store builds
    - name: Adjust Package Version
      run: |
        $appx = 'http://schemas.microsoft.com/appx/manifest/foundation/windows10'
        $rescap = 'http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities'
        $msbuild = 'http://schemas.microsoft.com/developer/msbuild/2003'
        $file = (Resolve-Path "$env:Project_Name/Package.appxmanifest")
        $xml = [System.Xml.XmlDocument]::new()
        $xml.Load($file)

        $nsmgr = [System.Xml.XmlNamespaceManager]::new($xml.NameTable)
        $nsmgr.AddNamespace("appx", $appx);
        $nsmgr.AddNamespace("rescap", $rescap);

        # adjust package version
        $node = $xml.GetElementsByTagName("Identity", $appx)[0]
        $version = [System.Version]::Parse($node.GetAttribute("Version"))

        if ($env:Version -ne "Store") {
          $commitDate = Get-Date (git show -s --format=%ci)

          $epoch = ($commitDate - (Get-Date $commitDate.Date -Day 1))
          $version = [System.Version]::new($version.Major, $version.Minor, $version.Build, $epoch.TotalMinutes);
          $node.SetAttribute("Version", $version.ToString())        
        }

        $xml.Save($file)

        echo "Appx_Bundle_Version=$($version.ToString())" >> $env:GITHUB_ENV
      env: 
        Appx_Bundle_Version: ''
        Version: ${{ matrix.version }}

    # Set the target version to 10.0.15035.0 and remove the confirmAppClose rescap
    # Only run for the WoA32 version
    - name: Patch Manifest and Project File
      if: ${{ matrix.version == 'WoA32' }}
      run: |
        $appx = 'http://schemas.microsoft.com/appx/manifest/foundation/windows10'
        $rescap = 'http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities'
        $msbuild = 'http://schemas.microsoft.com/developer/msbuild/2003'

        $file = (Resolve-Path "$env:Project_Name/Package.appxmanifest")
        $xml = [System.Xml.XmlDocument]::new()
        $xml.Load($file)

        $nsmgr = [System.Xml.XmlNamespaceManager]::new($xml.NameTable)
        $nsmgr.AddNamespace("appx", $appx);
        $nsmgr.AddNamespace("rescap", $rescap);
        
        # adjust target version
        $node = $xml.GetElementsByTagName("TargetDeviceFamily", $appx)[0]
        $node.SetAttribute("MinVersion", "10.0.15035.0");

        # remove confirmAppClose rescap
        $node = $xml.SelectSingleNode('//rescap:Capability[@Name="confirmAppClose"]', $nsmgr)
        $node.ParentNode.RemoveChild($node)
        
        $xml.Save($file)

        $file = (Resolve-Path "$env:ProjectFile_Name")
        $xml.Load($file)

        $nsmgr = [System.Xml.XmlNamespaceManager]::new($xml.NameTable)
        $nsmgr.AddNamespace("msbuild", $msbuild);

        $node = $xml.SelectSingleNode('//msbuild:PackageReference[@Include="Microsoft.UI.Xaml"]/msbuild:Version', $nsmgr)
        $node.InnerXml = "2.7.4-prerelease.221117002"
        $xml.Save($file)

    # Map the version to the appropriate environment variables, store in GITHUB_ENV
    - name: Set Environment Variables
      run: |
        if ($env:Version -eq 'Store') {
          echo "Appx_Package_Build_Mode=CI" >> $env:GITHUB_ENV
        } else {
          echo "Appx_Package_Build_Mode=SideloadOnly" >> $env:GITHUB_ENV
        }

        if ($env:Version -eq 'WoA32') {
          echo "Appx_Bundle=Never" >> $env:GITHUB_ENV
          echo "Appx_Bundle_Platforms=ARM" >> $env:GITHUB_ENV
          echo "Restore_Platform=ARM" >> $env:GITHUB_ENV
        } else {
          echo "Restore_Platform=x64" >> $env:GITHUB_ENV
          echo "Appx_Bundle=Always" >> $env:GITHUB_ENV
          echo "Appx_Bundle_Platforms=x86|x64|ARM|ARM64" >> $env:GITHUB_ENV
        }        
      env:
        Appx_Package_Build_Mode: ''
        Appx_Bundle_Platforms: ''
        Appx_Bundle: ''
        Restore_Platform: ''
        Version: ${{ matrix.version }}
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Load Certificate
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = "GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$env:Project_Name/$certificatePath", $pfx_cert_byte)

    # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore NuGet Packages
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration /p:Platform=$env:Restore_Platform
      env:
        Configuration: ${{ matrix.configuration }}
        Restore_Platform: ${{ env.Restore_Platform }}

    # Create the app package by building and packaging the project
    - name: Build App Packages
      run: |
        $params = @{
          "Configuration" = $env:Matrix_Configuration
          "SourceRevisionBranch" = $env:Head_Ref
          "SourceRevisionCommit" = $($env:Sha.Substring(0, 7))
          "UapAppxPackageBuildMode" = $env:Appx_Package_Build_Mode
          "AppxPackageDir" = $env:Appx_Package_Dir
          "AppxBundle" = $env:Appx_Bundle
          "AppxBundlePlatforms" = $env:Appx_Bundle_Platforms
          "PackageCertificateKeyFile" = "GitHubActionsWorkflow.pfx"
          "GenerateAppxPackageOnBuild" = "true"
        }

        if($env:Matrix_Version -eq 'WoA32') {
          $params.Add("Platform", "ARM")
        }

        if($env:Matrix_Configuration -eq 'Debug') {
          $params.Add("UseDotNetNativeToolchain", "true")
        }

        msbuild $env:ProjectFile_Name ($params.GetEnumerator() | % { "/p:$($_.Key)=$($_.Value)" })
      env:
        Appx_Bundle: ${{ env.Appx_Bundle }}
        Appx_Package_Dir: Packages\
        Appx_Package_Build_Mode: ${{ env.Appx_Package_Build_Mode }}
        Appx_Bundle_Platforms: ${{ env.Appx_Bundle_Platforms }}
        Build_Platform: ${{ env.Build_Platform }}
        Matrix_Configuration: ${{ matrix.configuration }}
        Matrix_Version: ${{ matrix.version }}
        Head_Ref: ${{ github.head_ref }}
        Sha: ${{ github.sha }}

    # Remove the pfx
    - name: Cleanup
      run: Remove-Item -path UniSky/GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload Appx Package
      uses: actions/upload-artifact@v4
      with:
        name: AppxPackage-${{ env.Appx_Bundle_Version }}-${{ matrix.configuration }}-${{ matrix.version }}
        path: |
          ${{ env.Project_Name }}\\Packages
